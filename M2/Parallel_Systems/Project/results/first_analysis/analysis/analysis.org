#+TITLE: M2R Parallel System Project - First Analysis
#+AUTHOR: Christopher FERREIRA

The end goal of this statistical analysis is to show that the static "pinning" thread mapping strategy is
better than the thread mapping strategy implemented by Linux for two reasons :
  + Lower execution time
  + Lower variability

* First run

We run a set of experiment with two parameters:
   + Number of Threads: ranging from 8 up to 64
   + Thread Mapping Strategy:
        - "cores": static round-robin thread mapping
        - "none": dynamic thread mapping from the Linux scheduler
For each set of parameters we run the experiment 30 times

** Gather data

Our experimental framework gathers a lot of metrics during the execution of each experiment.
Here we only care about the execution time so we gather these execution time for each single experiment
into a csv file.

#+BEGIN_SRC sh
  export LANG=C

  datafile=time1.csv
  rm -f $datafile
  for exp in ../first_run/outputs/*; do
      pinning=$(echo $(basename $exp) | cut -d'-' -f2)
      threads=$(echo $(basename $exp) | cut -d'-' -f3)

      for iteration_dir in $exp/*; do
          iteration=$(basename $iteration_dir)
          time=$(tail -1 $iteration_dir/time)

          printf '%s,%d,%d,%f\n' \
                 $pinning $threads $iteration \
                 $time \
                 >>$datafile
      done
  done

  wc -l $datafile
#+END_SRC

#+RESULTS:
: 480 time1.csv

** R session
   :PROPERTIES:
   :colnames: yes
   :session: *m2r_ps_17_first_analysis_1*
   :unit: px
   :END:

*** Setup

We first load the required libraries, loading the meta-package tidyverse
gets us everything (most notably dplyr and ggplot2).

#+BEGIN_SRC R :colnames no :results value verbatim
  library('tidyverse')

  'Ok !'
#+END_SRC

#+RESULTS:
: Ok !

Now we can load our data :
#+BEGIN_SRC R
  data <- read_csv('time1.csv',
          col_names = c('Pinning', 'Threads', 'Iteration', 'Time'))
  summary(data)
#+END_SRC

#+RESULTS:
| Pinning          | Threads    | Iteration    | Time           |
|------------------+------------+--------------+----------------|
| Length:480       | Min.   : 8 | Min.   : 1.0 | Min.   : 5.280 |
| Class :character | 1st Qu.:22 | 1st Qu.: 8.0 | 1st Qu.: 8.735 |
| Mode  :character | Median :36 | Median :15.5 | Median :14.305 |
| nil              | Mean   :36 | Mean   :15.5 | Mean   :18.636 |
| nil              | 3rd Qu.:50 | 3rd Qu.:23.0 | 3rd Qu.:23.095 |
| nil              | Max.   :64 | Max.   :30.0 | Max.   :58.710 |

*** Distributions

The first step is to look at the distribution of the execution time for each couple of parameter "Number of Threads" and "Thread Mapping Strategy".
We expect a Gaussian distribution.

#+BEGIN_SRC R :results output graphics :width 1200 :height 800 :file time-distributions1.png
  data.normalized <- data %>%
      group_by(Pinning, Threads) %>%
      mutate(
          Time.min = min(Time),
          Time.max = max(Time),
          Time.normalized = (Time - Time.min) / (Time.max - Time.min)
      )

  data.normalized %>%
      ggplot(aes(x = Time.normalized)) +
      geom_histogram(binwidth = 0.2) +
      facet_grid(Pinning ~ Threads, scales = "free_x")
#+END_SRC

#+RESULTS:
[[file:time-distributions1.png]]

The shape of the histograms are not that conclusive. Given that our experiment is rather cheap to run we decide to run 50 more experiments for each set of parameters

* First & Second run

Same setup as before but this time with 80 experiments for each set of parameters

** Gather data

Our experimental framework gathers a lot of metrics during the execution of each experiment.
Here we only care about the execution time so we gather these execution time for each single experiment
into a csv file.

#+BEGIN_SRC sh
  export LANG=C

  datafile=time2.csv
  rm -f $datafile
  for exp in ../first_run/outputs/* ../second_run/outputs/*; do
      pinning=$(echo $(basename $exp) | cut -d'-' -f2)
      threads=$(echo $(basename $exp) | cut -d'-' -f3)

      for iteration_dir in $exp/*; do
          iteration=$(basename $iteration_dir)
          time=$(tail -1 $iteration_dir/time)

          printf '%s,%d,%d,%f\n' \
                 $pinning $threads $iteration \
                 $time \
                 >>$datafile
      done
  done

  wc -l $datafile
#+END_SRC

#+RESULTS:
: 1280 time2.csv

** R session
   :PROPERTIES:
   :colnames: yes
   :session: *m2r_ps_17_first_analysis2*
   :unit: px
   :END:

*** Setup

We first load the required libraries, loading the meta-package tidyverse
gets us everything (most notably dplyr and ggplot2).

#+BEGIN_SRC R :colnames no :results value verbatim
  library('tidyverse')

  'Ok !'
#+END_SRC

#+RESULTS:
: Ok !

Now we can load our data :
#+BEGIN_SRC R
  data <- read_csv('time2.csv',
          col_names = c('Pinning', 'Threads', 'Iteration', 'Time'))
  summary(data)
#+END_SRC

#+RESULTS:
| Pinning          | Threads    | Iteration     | Time           |
|------------------+------------+---------------+----------------|
| Length:1280      | Min.   : 8 | Min.   : 1.00 | Min.   : 5.280 |
| Class :character | 1st Qu.:22 | 1st Qu.:10.75 | 1st Qu.: 8.727 |
| Mode  :character | Median :36 | Median :20.50 | Median :14.320 |
| nil              | Mean   :36 | Mean   :21.75 | Mean   :18.603 |
| nil              | 3rd Qu.:50 | 3rd Qu.:30.25 | 3rd Qu.:22.875 |
| nil              | Max.   :64 | Max.   :50.00 | Max.   :62.680 |

*** Distributions

The first step is to look at the distribution of the execution time for each couple of parameter "Number of Threads" and "Thread Mapping Strategy".
We expect a Gaussian distribution.

#+BEGIN_SRC R :results output graphics :width 1200 :height 800 :file time-distributions2.png
  data.normalized <- data %>%
      group_by(Pinning, Threads) %>%
      mutate(
          Time.min = min(Time),
          Time.max = max(Time),
          Time.normalized = (Time - Time.min) / (Time.max - Time.min)
      )

  data.normalized %>%
      ggplot(aes(x = Time.normalized)) +
      geom_histogram(binwidth = 0.2) +
      facet_grid(Pinning ~ Threads, scales = "free_x")
#+END_SRC

#+RESULTS:
[[file:time-distributions2.png]]

The distributions are gaussian as expected.
The shape of the histogram for "Thread Mapping Strategy" = cores and "Number of Threads" = 8 is not that great.
Given that we do not care so much about experiments with few number of Threads, we simply drops them and only keep the experiments with 16 and more threads in further analysis.

*** Plot

Now that we know that the execution times follows a gaussian distribution we can compute the averages
and confidence intervals of these results.
We want to plot our results as to efficiently display that the static thread mapping strategy is significantly better.
If we only meant to show that this strategy is better in terms of execution time we could have plotted the speedup or the difference.
In effect we also want to highlight the fact that the variability is significantly better so we simply plot the execution times.

#+BEGIN_SRC R :results output graphics :width 1400 :height 900 :file time-plot2.png
  CONFIDENCE <- 0.9999
  SDEV_OVERESTIMATION_FACTOR <- 2
  THREADS <- seq(16, 64, by = 8)

  z <- qnorm(CONFIDENCE + (1 - CONFIDENCE) / 2)

  data.plot <- data %>%
      filter(Threads %in% THREADS)

  data.mean <- data.plot %>%
      group_by(Pinning, Threads) %>%
      summarise(
          Time.mean  = mean(Time),
          Time.sdev  = sd(Time) * SDEV_OVERESTIMATION_FACTOR,

          Time.ci.error = z * Time.sdev / sqrt(n()),
          Time.ci.lower = Time.mean - Time.ci.error,
          Time.ci.upper = Time.mean + Time.ci.error
      ) %>%
      ungroup()

  pinning_name <- 'Thread Mapping       '
  pinning_colors <- c('#8ec43d', '#cd3f45')
  pinning_labels <- c('Static Round-Robin Thread Mapping         ', 'Dynamic Thread Mapping (Linux CFS Load Balancing)')

  ggplot(data.plot, aes(x = Threads, color = Pinning)) +
      geom_jitter(aes(y = Time, alpha = Pinning), position = position_jitter(width = 2)) +
      geom_errorbar(data = data.mean, aes(ymin = Time.ci.lower, ymax = Time.ci.upper), width=1) +
      geom_point(data = data.mean, aes(y = Time.mean)) +
      #geom_line(data = data.mean, aes(y = Time.mean)) +

      scale_x_continuous(breaks = THREADS) +
      scale_alpha_discrete(name = pinning_name, range = c(0.2, 0.2), labels = pinning_labels) +
      scale_color_manual(name = pinning_name, values = pinning_colors, labels = pinning_labels) +
      ggtitle("Comparison of Thread Mapping strategy with 99% confidence intervals (Lower is better)") +
      ylim(0, max(data.plot$Time) + 0.2) +
      xlab("Number of Threads") +
      ylab("Execution Time (Wall-Clock) in seconds") +

      theme_bw() +
      theme(legend.position = "bottom")
#+END_SRC

#+RESULTS:
[[file:time-plot2.png]]


